from rest_framework import serializers

from cart.serializers import PositionSerializer

from order.models import Order


class SimpleOrderSerializer(serializers.ModelSerializer):
    """
    Special serializer for the correct optimal display of the order list.
    """
    key = serializers.IntegerField(read_only=True)
    url = serializers.URLField(read_only=True)
    customer_id = serializers.IntegerField(read_only=True)
    numb_of_positions = serializers.IntegerField(read_only=True)
    total_price = serializers.FloatField(read_only=True)

    class Meta:
        model = Order
        fields = ["id", "url", "key", "customer_id", "numb_of_positions",
                  "total_price", "date", "payment_status"]


class AddSimpleOrderSerializer(serializers.ModelSerializer):
    """
    Special serializer for cart application to create a new order based on the cart
    positions list reviewed using POST method.
    """
    autogenerated_key = serializers.IntegerField(read_only=True)
    customer_id = serializers.IntegerField(read_only=True)

    class Meta:
        model = Order
        fields = ["id", "autogenerated_key", "customer_id"]


class OrderSerializer(serializers.ModelSerializer):
    key = serializers.IntegerField(read_only=True)
    customer_id = serializers.IntegerField(read_only=True)
    positions = PositionSerializer(read_only=True, many=True)
    numb_of_positions = serializers.IntegerField(read_only=True)
    total_price = serializers.FloatField(read_only=True)

    class Meta:
        model = Order
        fields = ["id", "key", "customer_id", "positions", "numb_of_positions",
                  "total_price", "date", "delivery_method", "payment_method",
                  "payment_status", "address", "post_index"]
        lookup_field = "id"
        extra_kwargs = {
            "url": {
                "lookup_field": "id"
            }
        }


class AddOrderSerializer(serializers.ModelSerializer):
    id = serializers.IntegerField(read_only=True)

    def save(self, **kwargs):
        delivery_method = self.validated_data["delivery_method"]
        payment_method = self.validated_data["payment_method"]
        address = self.validated_data["address"]
        post_index = self.validated_data["post_index"]

        order_item = Order.objects.get(id=self.id)
        order_item.delivery_method = delivery_method
        order_item.payment_method = payment_method
        order_item.payment_status = "Pending payment"
        order_item.address = address
        order_item.post_index = post_index
        order_item.save()
        self.instance = order_item

        return self.instance

    def validate_id(self, value):
        """
        If the order with passed ID exists.
        """
        try:
            assert Order.objects.get(id=value)
        except Order.DoesNotExist:
            raise serializers.ValidationError("Order with such ID does not exist.")
        return value

    def validate_amount(self, value):
        """
        If the passed 'post_index' number not longer than 6 symbols.
        """
        if len(str(value)) > 6:
            raise serializers.ValidationError("Post index should not be longer than 6 symbols.")
        return value

    class Meta:
        model = Order
        fields = ["id", "delivery_method", "payment_method", "address", "post_index"]
